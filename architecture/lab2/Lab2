/* PseudoCode

/* for testing this program, global variables should be defined as follows: 
 
    list[]: 1, 10, 2, 12, 3, 13     n: 6 */ 
 
main::      
  PrintChar('\n')      
  PrintString("ELEC 274 Lab 2\n")     
  PrintList(list,n)     
  PrintChar('\n')  
 
PrintChar(ch)::    /* ch is a parameter; st is local */     
do        
  st = read JTAG UART status register        
  st = st AND 0xFFFF0000    
while (st is zero)    
  write ch to JTAG UART data register 
 
PrintString(str_ptr)::      
loop        
  byte = read character byte at str_ptr address         
  if (byte is zero) then             
    exit loop         
  end if        
  
  PrintChar(byte)         
  str_ptr = str_ptr + 1    
end loop 
 
PrintHexDigit(digit)::    
  if (digit >= 10) then        
    ch = digit – 10 + 'A'    /* convert value to 'A' ... 'F' */    
  else         
    ch = digit + '0'         /* convert value to '0' ... '9' */     
  end if     
  PrintChar(ch) 
 
PrintList(list_ptr,n)::     
  for i = 0 to n – 1 
    do         
      PrintHexDigit(list_ptr[i])        
      PrintChar(',')     
  end for     
  PrintChar('\n')
  
  # Start of Lab Code

.equ	LAST_RAM_WORD,		0x007FFFFC		# last wrod location in DRAM chip
.equ	JTAG_UART_BASE, 	0x10001000		# address of first JTAG UART register
.equ	DATA_OFFSET,		0				# offset of JTAG UART data register
.equ	STATUS_OFFSET,		4				# offset of JTAG UART status register
.equ	WSPACE_MASK,		0xFFFF			# used in AND operation to check status

.text										# needed to indicate the start of a code segment
.global _start								# makes the _start symbol visible to the linker
.org						0x00000000		# starting memory location for following content


# Subroutines

PrintChar:
	subi	sp, sp, 8						# adjust stack pointer down to reserve space
	stw		r3, 4(sp)						# save value of register r3 so it can be a temp
	stw		r4, 0(sp)						# save value of register r4 so it can be a temp
	movia	r3, JTAG_UART_BASE				# pointer to first memory-mapped I/O register 
	
pc_loop:
	ldwio	r4, STATUS_OFFSET(r3)			# read bits from status register
	andhi	r4, r4, WSPACE_MASK				# mask off lower bits to isolate upper bits 
	beq		r4, r0, pc_loop					# if upper bits are zero, loop again
	stwio	r2, DATA_OFFSET(r3)				# otherwise, write character to data register
	ldw		r3, 4(sp)						# restore value of r3 from stack
	ldw 	r4, 0(sp)						# restore value of r4 from stack
	addi	sp, sp, 8						# readjust stack pointer up to deallocate space
	ret										# return to calling routine
	
	
PrintString:	
	subi	sp, sp, 12
	stw 	ra, 8(sp)						# nested calls -- save ra
	stw 	r3, 4(sp)						# for use as local pointer in string
	stw		r2, 0(sp)						# save original string pointer
	mov		r3, r2							# prepare local pointer
	
ps_loop:
	ldw		r2, 0(r3)						# get character and check if zero
	beq		r2, r0, end_ps_loop				
	call	PrintChar						# non-zero, so print it
	addi 	r3, r3, 1						# advance the pointer 
	br		ps_loop							# repeat loop body
	
end_ps_loop:	
	ldw		ra, 8(sp)						# recover saved registers
	ldw		r3, 4(sp)						
	ldw		r2, 0(sp)
	addi    sp, sp, 12
	ret
	
	
PrintHexList:
# Fill in the code here



#--------------------------------------------------------------------------------------------------

		.org	0x1000

# place word-sized data first to maintain word alignemnt

< global variable stuff >

# place byte sized data and strings after word sized data

MSG:	.asciz	"ELEC274 Lab2\n"
		.end
	
  
